framework:
    messenger:
        failure_transport: failed_messages
        default_bus: none.bus
        buses:
            none.bus:
                default_middleware: allow_no_handlers
            command.bus:
                middleware:
                    - doctrine_ping_connection
                    - doctrine_close_connection
                    - doctrine_transaction
            query.bus:
                default_middleware: allow_no_handlers
                middleware:
                    - validation
            event.bus:
                default_middleware: allow_no_handlers
                middleware:
                    - validation
            projection.bus:
                default_middleware: allow_no_handlers
                middleware:
                    - doctrine_ping_connection
                    - doctrine_close_connection
                    - doctrine_transaction

        transports:
            # Command Transports
            commands_async: '%env(MESSENGER_TRANSPORT_BASE_DSN)%/commands'
            commands_sync: 'sync://'

            # Event Transports
            events_async: '%env(MESSENGER_TRANSPORT_BASE_DSN)%/events'
            events_sync: 'sync://'

            # Query Transports
            # It makes no sense to queries to
            # have an async transport. It has
            # to be sync so the customer can
            # get back the response
            queries_sync: 'sync://'

            # Projection Transports
            projections_async: '%env(MESSENGER_TRANSPORT_BASE_DSN)%/projections'
            projections_sync: 'sync://'

            # Dead letter box
            failed_messages: '%env(MESSENGER_TRANSPORT_BASE_DSN)%/failed_messages'
        routing:
            # With a proper UX, almost all the commands should
            # be run asynchronously.However, some commands can
            # be defined to run synchronously.
            Cheeper\Chapter7\Application\Author\Command\SignUpCommand: commands_sync
            Cheeper\Chapter7\Application\Author\Command\FollowCommand: commands_async
            Cheeper\Chapter7\Application\Cheep\Command\PostCheepCommand: commands_async

            # Events can be run synchronously, however
            # all the benefits like performance and
            # transaction isolation comes when using
            # the asynchronous transport.
            Cheeper\Chapter7\DomainModel\DomainEvent: events_async

            # Queries must be synchronous. Their responses
            # need to be back to the customers.
            Cheeper\Chapter7\Application\Query: queries_sync

            # Projections should run asynchronously by default.
            # However, it's possible to run some synchronously
            # without getting the performance benefits.
            Cheeper\Chapter7\Application\Projection: projections_async
